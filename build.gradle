// gradle build script for the arc42 template
//
// free software - without guarantee, use at your own risk
// ========================================================


buildscript {
    // these are the BUILDSCRIPT deps - required to execute
    // build targets and -operations
    repositories {
        maven {
            name 'Bintray Asciidoctor repo'
            url  'http://dl.bintray.com/content/aalmiray/asciidoctor'
        }
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath( 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.0' )

    }
}



// =========== asciidoctor stuff ===============
apply plugin: 'asciidoctor'

asciidoctor {
    outputDir = new File("$buildDir/docs")
    baseDir = project.file('src/DE/asciidoc')

    // in case we need to test some asciidoc features,
    // try in arc42-test.adoc and uncomment the following line
    //sourceDocumentName = project.file('src/DE/asciidoc/arc42-test.adoc')
    sourceDocumentName = project.file('src/DE/asciidoc/arc42-template-ohne-hilfe.adoc')

    // asciidoctor will convert ALL files contained in sourceDir!
    sourceDir = project.file('src/DE/asciidoc')

    options = [
        attributes: [
            toc         : 'left',
            backend     : 'html5',
            doctype     : 'book',
            icons       : 'font',
            sectlink    : true,
            sectanchors : true,
            numbered    : true,
            imagesdir   : '../images',
        ]
    ]
}



defaultTasks 'arc42'

task copyImages(
    type: Copy,
    description: 'copy images into build output folder so that references can be resolved '
) {
    from 'src/DE/images'
    into './build/images'
}


task copyResources(
    type: Copy,
    description: 'copy (downloadable) resources and artifacts to resource folder'
) {
    from 'src/resources'
    into './build/docs/resources'
}

task streamingExecute(
    dependsOn: [],
    description: 'extends the String class with a better .executeCmd'
) << {
    //I need a streaming execute in order to export from EA
    String.metaClass.executeCmd = {
        //make sure that all paramters are interpreted through the cmd-shell
        //TODO: make this also work with *nix
        def p = "cmd /c ${delegate.value}".execute()
        def result=[std:'',err:'']
        def ready = false
        Thread.start{
            def reader = new BufferedReader(new InputStreamReader(p.in))
            def line = ""
            while ((line = reader.readLine()) != null) {
                println ""+line
                result.std+=line+"\n"
            }
            ready=true
            reader.close()
        }
        p.waitForOrKill(30000)
        def error = p.err.text
        if (error.isEmpty()) {
            return result
        } else {
            throw new RuntimeException("\n"+error)
        }
    }
}
task exportEA(
    dependsOn: [streamingExecute],
    description: 'exports all diagrams and some texts from EA files'
) << {
    new File('build/asciidoc/.').mkdirs()
    //execute through cscript in order to make sure that we get WScript.echo right
    "%SystemRoot%\\System32\\cscript.exe //nologo src/scripts/exportEAP.vbs".executeCmd()
    //the VB Script is only capable of writing ASCII-Files.
    //we now have to convert them to UTF-8
    new File('build/asciidoc/.').eachFileRecurse { file ->
    	file.write(file.getText('iso-8859-1'),'utf-8')
    }
}
task arc42(
    dependsOn: [copyResources, copyImages, asciidoctor],
    description: 'collects all required tasks for creating arc42 documentation'
) << { }

task arc42withEA(
    dependsOn: [copyResources, copyImages, exportEA, asciidoctor],
    description: 'same as arc42 but exports diagrams from EA before building arc42 docs'
) << { }

asciidoctor.mustRunAfter exportEA