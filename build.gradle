// gradle build script for the arc42 template family
//
// free software - without guarantee, use at your own risk
// ========================================================


buildscript {
    // these are the BUILDSCRIPT deps - required to execute
    // build targets and -operations
    repositories {
        maven {
            name 'Bintray Asciidoctor repo'
            url  'http://dl.bintray.com/content/aalmiray/asciidoctor'
        }
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath( 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.0' )

    }
}


// set common output directory for all subprojects
project.ext.globalBuildDir = project.buildDir

project.description = """
${'='*80}
This project builds a set of different arc42-templates from the golden master (asciidoc)
${'='*80}
"""
// empty build task for netbeans
task build () << {}

task createTemplatesFromGoldenMaster (
    description: 'takes the golden master and removes all help sections',
    group: 'arc42-template'
) << {
    def sourcePath = './src/DE/asciidoc/'
    def targetPath = './src_gen/DE/asciidoc/'
	def source = new File(sourcePath+'golden-master/src/.')
    //the list of features/tags available in the golden master
    def allFeatures = ['help','example']
    //the template styles with their corresponding features
    def templateStyles = [
                        'plain':[],
                        'with-help':['help'],
// deaktivated for the moment - no content yet
//                        'with-examples':['help','example'],
                    ]
    templateStyles.each { templateName, featuresWanted ->
        def featuresToRemove = allFeatures - featuresWanted
        def target = new File(targetPath+templateName+'/src/.')
        target.mkdirs()
        source.eachFile { file ->
            if (file.name.endsWith('.adoc')) {
                def targetFile = new File(target.path+'/'+file.name)
                println targetFile.path
                def template = file.getText('utf-8')
                featuresToRemove.each { feature ->
                    template = template.replaceAll(/(?ms)\[role="arc42/+feature+/"\][ \r\n]+[*]{4}.*?[*]{4}/,'')
                }
                targetFile.write(template,'utf-8')
            }
        }
        //copy build file
        //(yes, we could do this as gradle step, but since we are at the groovy level...
        def buildFile = new File(sourcePath+'golden-master/build.gradle').text
        new File(targetPath+templateName+'/build.gradle').write(buildFile)
        //copy common files
        new File(targetPath+'/common/').mkdirs()
        def source2 = new File(sourcePath+'common/.')
        source2.eachFile { file ->
            target = new File(targetPath+'/common/'+file.name)
            println target.path
            target.write(file.getText('utf-8'),'utf-8')
        }
    }      
}

task createDistribution (
    dependsOn: [],
    description: 'bundles the converted templates into downloadable zip files',
    group: 'arc42-template'
) {
    println "="*80
    subprojects.each { project ->
        def shortName = project.name.replaceAll("^.*[/\\\\]","").replaceAll("[^a-zA-Z]","")
        ['asciidoc','html','epub','markdown','docx','docbook'].each { format ->
            def taskName = "createDistributionFor_${shortName}_$format"
            tasks.create(name: taskName, type: Zip) {
                baseName = "arc42-template-${shortName}-$format"
                archiveName = baseName+'.zip'
                destinationDir = file("./dist")
                //archivePath = "$shortName/$format"
                include "**/*"
                from "./build/DE/$format/${project.name.replaceAll("^.*[/\\\\]","")}"
            }
            tasks[taskName].execute()
            tasks.createDistribution.dependsOn << taskName
        }
    }
}

task publishDistribution (
        dependsOn: ["publish:pushGhPages"],
        description: 'publishes generated templates to github',
        group: 'arc42-template'
) << {

}